Multitier architecture or n-tier architecture
معماری چند صف ای یا n صف ای

معماری Multitier یا n-tier در مهندسی نرم افزار یک معماری سرویس دهنده و سرویس گیرنده هست که روند اجرای برنامه را توضیح میدهد و در آن مدیریت داده ها منطقا، پردازش ها را جدا میکند.
برای مثال یک برنامه که از *middleware (واسط های نرم افزاری) برای سرویس دادن به درخواست های داده بین کاربران و پایگاه داده استفاده میکنند میتواند این معماری را بکار بگیرد.
شایع ترین نوع بکارگیری از این معماری، نوع سه صف ای (three-tier architecture) آن است .
این معماری برای طراحان نرم افزاری یک مدل برای ساخت نرم افزار های منعطف و دوباره استفاده شونده (reusable) فراهم میکند.
با شکستن یک نرم افزار به صف های مختلف، طراحان فقط مجبور به تغییر یا اضافه کردن یک صف خاص هستند به جای اینکه مجبور به باز نویسی کل نرم افزار شوند.
بنابر این، صف های نمایش (presentation) ، کنترل داده (business or data access) ، و داده (data) باید حتما ایجاد گردند.
مفهوم لایه (layer) و صف (tier) معمولا به جای هم استفاده میشوند.بهرحال در یک دید درست تر بین این دو براستی تفاوتی وجود دارد و آن اینست که لایه یک مکانیزم ساختاری منطقی برای اجزایی که راه حل نرم افزاری ارائه میدهند است اما صف یک مکانیزم ساختاری فیزیکی برای زیربنای سیستم است.

# مترجم :
به نظر من منظور از زیربنای سیستم در اینجا چیزی فراتر از اجزای داخل یک نرم افزار است و اشاره به پیاده سازی پروتکل های ارتباطی بین نرم افزاری، مثل وب سرویس ها دارد.

معماری سه صف ای:
همانطور که گفته شد معماری سه صفی یک معماری سرویس دهنده - سرویس گیرنده است که در آن رابط کاربری ، منطق پردازشی رویه ای (functional process logic) و ذخیره و بازبینی اطلاعات به صورت واحد های وابسته به هم اما اغلبا در سکوهای جدا طراحی و نگه داری میشوند .

این مدل یک معماری نرم افزاری (software architecture) و یک الگوی پیاده سازی نرم افزار (software design pattern) است .

# مترجم :

تفاوت معماری نرم افزاری (software architecture) و  الگوی پیاده سازی نرم افزار (software design pattern) در این است که معماری نرم افزار اسکلت نرم افزار را در یک سطح بالا توضیح میدهد مثل MVC یا 3-tier layered design اما الگوی پیاده سازی بر روی جزئیاتی مثل طراحی ماژول ها ، کلاس ها و اینکه چه کارهایی باید و نباید انجام دهیم و یا فانکشن های داخل یک کلاس چه چیزهایی باید باشند متمرکز میشوند

صف میانی میتواند شامل چندین صف باشد و این دلیل کلی این است که اسم این معماری "n-tier architecture" است .

http://upload.wikimedia.org/wikipedia/commons/5/51/Overview_of_a_three-tier_application_vectorVersion.svg

توضیح عکس بالا:

صف ارائه (Prestion tier) :
بالاترین سطح از نرم افزار معمولا رابط کاربری آن است. اصلی ترین عمل رابط کاربری ترجمه وظائف و نتایج به چیزی است که قابل فهم برای کاربران باشد.

صف منطق (Application tier,business logic, logic tier, data access tier, or middle tier) :
این لایه هماهنگ کننده برنامه ، دستورات پردازشی ، گرفتن تصمیمات منطقی و ارزیابانه و فراهم کننده محاسبات است.
همچنین کار انتقال و پرداش داده ها بین دو لایه اطراف خور را نیز به عهده دارد.

صف داده (Data tier) :
در اینجا کار ذخیره و بازیابی  اطلاعات از پایگاه داده یا سیستم فایل انجام میشود. سپس اطلاعات به صف منطق برای پردازش و پس از آن استفاده کاربر داده میشود.


مقایسه با معماری  MVC:
در یک نظر اجمالی معماری سه صفی بسیار شبیه به مفهوم MVC است اما بهرحال اینها متفاوت از یگدیکرند.
نقش بنیادی در معماری سه صفی اینست که صف سرویس گیرنده هیچ وقت نمیتواند به طور مستقیم با یه صف داده ارتباط برقرار کند بلکه همه ارتباط ها باید از صف میانی عبور کنند.
مفهموما معماری سه صفی خطی است اما MVC مثلثی است :‌view بروزرسانی ها را به controller میفرستد و آن model را بروزرسانی میکند و  view بروزرسانی ها را مستفیما از model میگیرد.
از نگاه تاریخی مفهوم سه صف ای در سال ۱۹۹۰ از مشاهده سیستم های توزیع شده (به عنوان مثال وب اپلیکیشن ها) بوجود آمد جایی که سرویس گیرنده و نرم افزار های واسط و داده ها بر روی بستر های جدا اجرا میشدن.
اما MVC قبلتر از ان بر روی نرم افزار های توزیع نشده بوجود آمد.


استفاده از این الگو در طراحی وب:
در طراحی وب معماری سه لایه بیشتر برای اشاره به مقهوم وب سایت به کار میرود. برای مثال سایتهای تجارت الکترونیک که از الگوی سه صف ای استفاده میکنند: 
۱. در خط مقدم یک سرویس دهنده وب مطالب ثابت یا یک سری مطالب ذخیره شده را ارائه میدهد.در نرم افزار های بر پایه وب، خط مقدم مرورگرهایی هستند که مطالب را render میکنند.
۲. در خط میانی که محتوا را پردازش میکند ابزارهایی مثل PHP , ASP.NET , JAVA EE  و .... قرار دارند.
۳. در ستون فقرات، پایگاه داده قرار دارد.

سایر ملاحظات :
انتقال اطلاعات بین صفوف خود قسمتی از معماری است .
قراردادهایی که برای این کار میتوان استفاده کرد یک یا چند مورد از اینها میتوانید باشد:
SNMP, CORBA, Java RMI, .NET Remoting, Windows Communication Foundation, sockets, UDP, web services
و یا سایر قراردادهای مربوطه!
معمولا برای برقراری ارتباط بین صفوف جدا که حتی ممکنه بر روی بستر های جدا اجرا شوند از نرم افزار میانی (middleware) استفاده میشود.

قابلیت ردیابی:
ردیابی نقطه به نقطه روند انتقال اطلاعات در یک معماری  n صف ای یک وظیفه چالش برانگیز است مخصوصا وقتی پیچیده گی سیستم زیاد میشود.
مفهومی که به ما اجازه اندازه گیری کارایی و ارتباط انتقال اطلاعات بین صفوف را میدهد    Application Response Measurement** نام دارد.


*Middleware is computer software that connects software components or people and their applications

** http://en.wikipedia.org/wiki/Application_Response_Measurement





http://en.wikipedia.org/wiki/Multitier_architecture
http://en.wikipedia.org/wiki/Middleware



